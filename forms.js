
//Prevents the default form submission behavior.
//Retrieves the phone number input value from the form.
//Displays a message indicating that the information is being processed.
//Creates a new Promise that resolves with a server response (generated by getServerResponse2).
//When the Promise resolves, it passes the response to the parseResponse function for further processing.

function handleSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const dateinput = form[2];
    const nameinput = form[0];
    const timeinput = form[3];
    const date = dateinput.value;
    const name = nameinput.value;
    const time = timeinput.value;
    output(` Thank you ${name}. Your appointment is scheduled on ${date} @ ${time}! Please wait for confirmation code...`);
    const promise = new Promise(getServerResponse2);
    promise.then(parseResponse);
}

//A callback used to initialize the promise. This callback is passed two arguments: a resolve callback used to resolve the promise with a value or the result of another promise, and a reject callback used to reject the promise with a provided reason or error.
//This function simulates a server response after a 5-second delay. It creates a promise that resolves with a JSON string containing a success message.
//This function, getServerResponse2, simulates a delayed server response. It waits 5 seconds (setTimeout with 5000ms) before resolving a promise with a predefined response message ("Received! We Will be in touch!"). The response is sent as a JSON string.

function getServerResponse2(resolve) {
    setTimeout(activateResolve, 5000);
    
    function activateResolve() {
        const response = {
        message: "Your confirmation code is ParkCode117",
        };
        const resolveValue = JSON.stringify(response);
        resolve(resolveValue);
    }
}
    
    
/**
 * Takes a JSON string from the server response, parses it, and outputs a
 * confirmation code to the user.The JSON string from the server response.
 */
function parseResponse(resolveValue) {
    const response = JSON.parse(resolveValue);
    const message = response.message;
    output(message);
}


//This JavaScript function, output, appends a given message to the HTML content of an element with the id outputTag, followed by a line break (<br>)
function output(message) {

    outputTag.innerHTML += message + "<br>";
}


function processForm(event) {
  event.preventDefault();
  const form = event.target;
  const messageInput = form[0];
  const message = messageInput.value;
  output(` ${message} has been added to our mailing list!`);
}

function handleSubmit1(event) {
    event.preventDefault();
    const form = event.target;
    const nameinput = form[0];
    const emailinput = form[3];
    const name = nameinput.value;
    const email = emailinput.value;
    output(` Thank you ${name}.! Please wait for confirmation code...`);
    const promise = new Promise(getServerResponse2);
    promise.then(parseResponse);
}